grammar fr.inria.diverse.MiniFSM with org.eclipse.xtext.common.Terminals

import "http://fr.inria.diverse.melanger.melangedlang/minifsm/" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

FSM returns FSM:
	'FSM'
	'{'
		(states+=State ( states+=State )* )?
		'initialState' initialState=[State|EString]
		(transitions+=Transition ( transitions+=Transition )* )?
		(context=Context)?
	'}';

State returns State:
	State_Impl | FinalState;

Variable returns Variable:
	IntegerVar | BooleanVar;

Statement returns Statement:
	BooleanAssignment | IntAssignment | PrintVar | PrintStr;

State_Impl returns State:
	{State}
	'State'	name=EString
	(block=Block)?
	;

Transition returns Transition:
	input=[State|EString] '->' output=[State|EString]
	('[' expression=BooleanExpression ']' )?
	;

Context returns Context:
	{Context}
	'Context'
	'{'
		(variables+=Variable ( variables+=Variable )* )?
	'}';

Block returns Block:
	{Block}
	'{'
		(statement+=Statement ( statement+=Statement )*  )?
	'}';

FinalState returns FinalState:
	{FinalState}
	'FinalState' name=EString
	(block=Block)?
	;


BooleanAssignment returns BooleanAssignment:
	'AssignBool' '(' variable=BooleanVariableRef ',' value=BooleanExpression ')'
	;

IntAssignment returns IntAssignment:
	'AssignInt' '(' variable=IntVariableRef ',' value=IntExpression ')'
	;

PrintVar returns PrintVar:
	'PrintVar' '(' value=EString ')'
	;

PrintStr returns PrintStr:
	'PrintStr' '(' value=EString ')'
	;


/*
 * Logical operators
 */

BooleanExpression returns BooleanExpression:
	AndOr
;

AndOr returns BooleanExpression:
	TermBool ( ({Or.left=current} 'OR' right=AndOr) | ({And.left=current} 'AND' right=AndOr) )?
	;

TermBool returns BooleanExpression:
	Boolean | BooleanVariableRef | IntComparison | {Not} '!' expression=TermBool
	;

Not returns Not:
	'!' expression=AndOr
	;

BooleanVariableRef returns BooleanVariableRef:
	{BooleanVariableRef} 
	name=EString
	;

Boolean returns Boolean:
	value?='value'
	'Boolean'
	;
	
EBoolean returns ecore::EBoolean:
	'true' | 'false';


/*
 * Integer comparators
 */
 
IntComparison returns IntComparison:
	Equal | Greater | GreaterOrEqual | Less | LessOrEqual
	;
	
Equal returns Equal:
	'equal' '(' left=IntExpression ',' right=IntExpression')'
	;

Greater returns Greater:
	'greater' '(' left=IntExpression ',' right=IntExpression')'
	;

GreaterOrEqual returns GreaterOrEqual:
	'greaterOrEqual' '(' left=IntExpression ',' right=IntExpression')'
	;

Less returns Less:
	'less' '(' left=IntExpression ',' right=IntExpression')'
	;

LessOrEqual returns LessOrEqual:
	'lessOrEqual' '(' left=IntExpression ',' right=IntExpression')'
	;


/*
 * Integer operators
 */

IntExpression returns IntExpression:
	PlusMinus;

PlusMinus returns IntExpression:
		MultDiv ( ({Plus.left=current} '+' right=MultDiv) | ({Minus.left=current} '-' right=MultDiv) )?
	;
	
MultDiv returns IntExpression:
	TermInt ( ({Multiply.left=current}'*' right=TermInt) | ({Divide.left=current}'/' right=TermInt) )? 
;

TermInt returns IntExpression:
	Integer | IntVariableRef | '(' PlusMinus ')'
;

Integer returns Integer:
	value=EInt
	;

IntVariableRef returns IntVariableRef:
	{IntVariableRef}
	name=EString;

EInt returns ecore::EInt:
	'-'? INT;

IntegerVar returns IntegerVar:
	{IntegerVar}
	'Integer' name=EString ('=' value=EInt)?
	;
	
EString returns ecore::EString:
	STRING | ID;

BooleanVar returns BooleanVar:
	{BooleanVar}
	'Boolean' name=EString ('=' value=EBoolean)?
	;
