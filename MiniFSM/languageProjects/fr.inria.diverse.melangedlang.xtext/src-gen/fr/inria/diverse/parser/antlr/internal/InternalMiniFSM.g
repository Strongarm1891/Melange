/*
 * generated by Xtext 2.9.2
 */
grammar InternalMiniFSM;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.inria.diverse.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.inria.diverse.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.inria.diverse.services.MiniFSMGrammarAccess;

}

@parser::members {

 	private MiniFSMGrammarAccess grammarAccess;

    public InternalMiniFSMParser(TokenStream input, MiniFSMGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "FSM";
   	}

   	@Override
   	protected MiniFSMGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFSM
entryRuleFSM returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFSMRule()); }
	iv_ruleFSM=ruleFSM
	{ $current=$iv_ruleFSM.current; }
	EOF;

// Rule FSM
ruleFSM returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FSM'
		{
			newLeafNode(otherlv_0, grammarAccess.getFSMAccess().getFSMKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getFSMAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFSMAccess().getStatesStateParserRuleCall_2_0_0());
					}
					lv_states_2_0=ruleState
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFSMRule());
						}
						add(
							$current,
							"states",
							lv_states_2_0,
							"fr.inria.diverse.MiniFSM.State");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFSMAccess().getStatesStateParserRuleCall_2_1_0());
					}
					lv_states_3_0=ruleState
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFSMRule());
						}
						add(
							$current,
							"states",
							lv_states_3_0,
							"fr.inria.diverse.MiniFSM.State");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_4='initialState'
		{
			newLeafNode(otherlv_4, grammarAccess.getFSMAccess().getInitialStateKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFSMRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getFSMAccess().getInitialStateStateCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFSMAccess().getTransitionsTransitionParserRuleCall_5_0_0());
					}
					lv_transitions_6_0=ruleTransition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFSMRule());
						}
						add(
							$current,
							"transitions",
							lv_transitions_6_0,
							"fr.inria.diverse.MiniFSM.Transition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFSMAccess().getTransitionsTransitionParserRuleCall_5_1_0());
					}
					lv_transitions_7_0=ruleTransition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFSMRule());
						}
						add(
							$current,
							"transitions",
							lv_transitions_7_0,
							"fr.inria.diverse.MiniFSM.Transition");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFSMAccess().getContextContextParserRuleCall_6_0());
				}
				lv_context_8_0=ruleContext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFSMRule());
					}
					set(
						$current,
						"context",
						lv_context_8_0,
						"fr.inria.diverse.MiniFSM.Context");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getFSMAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleState
entryRuleState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStateAccess().getState_ImplParserRuleCall_0());
		}
		this_State_Impl_0=ruleState_Impl
		{
			$current = $this_State_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStateAccess().getFinalStateParserRuleCall_1());
		}
		this_FinalState_1=ruleFinalState
		{
			$current = $this_FinalState_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableAccess().getIntegerVarParserRuleCall_0());
		}
		this_IntegerVar_0=ruleIntegerVar
		{
			$current = $this_IntegerVar_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableAccess().getBooleanVarParserRuleCall_1());
		}
		this_BooleanVar_1=ruleBooleanVar
		{
			$current = $this_BooleanVar_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBooleanAssignmentParserRuleCall_0());
		}
		this_BooleanAssignment_0=ruleBooleanAssignment
		{
			$current = $this_BooleanAssignment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIntAssignmentParserRuleCall_1());
		}
		this_IntAssignment_1=ruleIntAssignment
		{
			$current = $this_IntAssignment_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getPrintVarParserRuleCall_2());
		}
		this_PrintVar_2=rulePrintVar
		{
			$current = $this_PrintVar_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getPrintStrParserRuleCall_3());
		}
		this_PrintStr_3=rulePrintStr
		{
			$current = $this_PrintStr_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleState_Impl
entryRuleState_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getState_ImplRule()); }
	iv_ruleState_Impl=ruleState_Impl
	{ $current=$iv_ruleState_Impl.current; }
	EOF;

// Rule State_Impl
ruleState_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getState_ImplAccess().getStateAction_0(),
					$current);
			}
		)
		otherlv_1='State'
		{
			newLeafNode(otherlv_1, grammarAccess.getState_ImplAccess().getStateKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getState_ImplAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getState_ImplRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.inria.diverse.MiniFSM.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getState_ImplAccess().getBlockBlockParserRuleCall_3_0());
				}
				lv_block_3_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getState_ImplRule());
					}
					set(
						$current,
						"block",
						lv_block_3_0,
						"fr.inria.diverse.MiniFSM.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	iv_ruleTransition=ruleTransition
	{ $current=$iv_ruleTransition.current; }
	EOF;

// Rule Transition
ruleTransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransitionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTransitionAccess().getInputStateCrossReference_0_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransitionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTransitionAccess().getOutputStateCrossReference_2_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='['
			{
				newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getLeftSquareBracketKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTransitionAccess().getExpressionBooleanExpressionParserRuleCall_3_1_0());
					}
					lv_expression_4_0=ruleBooleanExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTransitionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_4_0,
							"fr.inria.diverse.MiniFSM.BooleanExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getTransitionAccess().getRightSquareBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleContext
entryRuleContext returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContextRule()); }
	iv_ruleContext=ruleContext
	{ $current=$iv_ruleContext.current; }
	EOF;

// Rule Context
ruleContext returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getContextAccess().getContextAction_0(),
					$current);
			}
		)
		otherlv_1='Context'
		{
			newLeafNode(otherlv_1, grammarAccess.getContextAccess().getContextKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getContextAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getContextAccess().getVariablesVariableParserRuleCall_3_0_0());
					}
					lv_variables_3_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContextRule());
						}
						add(
							$current,
							"variables",
							lv_variables_3_0,
							"fr.inria.diverse.MiniFSM.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getContextAccess().getVariablesVariableParserRuleCall_3_1_0());
					}
					lv_variables_4_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContextRule());
						}
						add(
							$current,
							"variables",
							lv_variables_4_0,
							"fr.inria.diverse.MiniFSM.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getContextAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getStatementStatementParserRuleCall_2_0_0());
					}
					lv_statement_2_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"statement",
							lv_statement_2_0,
							"fr.inria.diverse.MiniFSM.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getStatementStatementParserRuleCall_2_1_0());
					}
					lv_statement_3_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"statement",
							lv_statement_3_0,
							"fr.inria.diverse.MiniFSM.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleFinalState
entryRuleFinalState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFinalStateRule()); }
	iv_ruleFinalState=ruleFinalState
	{ $current=$iv_ruleFinalState.current; }
	EOF;

// Rule FinalState
ruleFinalState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFinalStateAccess().getFinalStateAction_0(),
					$current);
			}
		)
		otherlv_1='FinalState'
		{
			newLeafNode(otherlv_1, grammarAccess.getFinalStateAccess().getFinalStateKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFinalStateAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFinalStateRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.inria.diverse.MiniFSM.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFinalStateAccess().getBlockBlockParserRuleCall_3_0());
				}
				lv_block_3_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFinalStateRule());
					}
					set(
						$current,
						"block",
						lv_block_3_0,
						"fr.inria.diverse.MiniFSM.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleBooleanAssignment
entryRuleBooleanAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanAssignmentRule()); }
	iv_ruleBooleanAssignment=ruleBooleanAssignment
	{ $current=$iv_ruleBooleanAssignment.current; }
	EOF;

// Rule BooleanAssignment
ruleBooleanAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='AssignBool'
		{
			newLeafNode(otherlv_0, grammarAccess.getBooleanAssignmentAccess().getAssignBoolKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanAssignmentAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanAssignmentAccess().getVariableBooleanVariableRefParserRuleCall_2_0());
				}
				lv_variable_2_0=ruleBooleanVariableRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanAssignmentRule());
					}
					set(
						$current,
						"variable",
						lv_variable_2_0,
						"fr.inria.diverse.MiniFSM.BooleanVariableRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getBooleanAssignmentAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanAssignmentAccess().getValueBooleanExpressionParserRuleCall_4_0());
				}
				lv_value_4_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanAssignmentRule());
					}
					set(
						$current,
						"value",
						lv_value_4_0,
						"fr.inria.diverse.MiniFSM.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getBooleanAssignmentAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleIntAssignment
entryRuleIntAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntAssignmentRule()); }
	iv_ruleIntAssignment=ruleIntAssignment
	{ $current=$iv_ruleIntAssignment.current; }
	EOF;

// Rule IntAssignment
ruleIntAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='AssignInt'
		{
			newLeafNode(otherlv_0, grammarAccess.getIntAssignmentAccess().getAssignIntKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIntAssignmentAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntAssignmentAccess().getVariableIntVariableRefParserRuleCall_2_0());
				}
				lv_variable_2_0=ruleIntVariableRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntAssignmentRule());
					}
					set(
						$current,
						"variable",
						lv_variable_2_0,
						"fr.inria.diverse.MiniFSM.IntVariableRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getIntAssignmentAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntAssignmentAccess().getValueIntExpressionParserRuleCall_4_0());
				}
				lv_value_4_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntAssignmentRule());
					}
					set(
						$current,
						"value",
						lv_value_4_0,
						"fr.inria.diverse.MiniFSM.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getIntAssignmentAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRulePrintVar
entryRulePrintVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintVarRule()); }
	iv_rulePrintVar=rulePrintVar
	{ $current=$iv_rulePrintVar.current; }
	EOF;

// Rule PrintVar
rulePrintVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PrintVar'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintVarAccess().getPrintVarKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPrintVarAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintVarAccess().getValueEStringParserRuleCall_2_0());
				}
				lv_value_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintVarRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"fr.inria.diverse.MiniFSM.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getPrintVarAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulePrintStr
entryRulePrintStr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintStrRule()); }
	iv_rulePrintStr=rulePrintStr
	{ $current=$iv_rulePrintStr.current; }
	EOF;

// Rule PrintStr
rulePrintStr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PrintStr'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintStrAccess().getPrintStrKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPrintStrAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintStrAccess().getValueEStringParserRuleCall_2_0());
				}
				lv_value_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintStrRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"fr.inria.diverse.MiniFSM.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getPrintStrAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	iv_ruleBooleanExpression=ruleBooleanExpression
	{ $current=$iv_ruleBooleanExpression.current; }
	EOF;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBooleanExpressionAccess().getAndOrParserRuleCall());
	}
	this_AndOr_0=ruleAndOr
	{
		$current = $this_AndOr_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAndOr
entryRuleAndOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndOrRule()); }
	iv_ruleAndOr=ruleAndOr
	{ $current=$iv_ruleAndOr.current; }
	EOF;

// Rule AndOr
ruleAndOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndOrAccess().getTermBoolParserRuleCall_0());
		}
		this_TermBool_0=ruleTermBool
		{
			$current = $this_TermBool_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getAndOrAccess().getOrLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='OR'
				{
					newLeafNode(otherlv_2, grammarAccess.getAndOrAccess().getORKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAndOrAccess().getRightAndOrParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleAndOr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAndOrRule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"fr.inria.diverse.MiniFSM.AndOr");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getAndOrAccess().getAndLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='AND'
				{
					newLeafNode(otherlv_5, grammarAccess.getAndOrAccess().getANDKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAndOrAccess().getRightAndOrParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleAndOr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAndOrRule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"fr.inria.diverse.MiniFSM.AndOr");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleTermBool
entryRuleTermBool returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermBoolRule()); }
	iv_ruleTermBool=ruleTermBool
	{ $current=$iv_ruleTermBool.current; }
	EOF;

// Rule TermBool
ruleTermBool returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTermBoolAccess().getBooleanParserRuleCall_0());
		}
		this_Boolean_0=ruleBoolean
		{
			$current = $this_Boolean_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermBoolAccess().getBooleanVariableRefParserRuleCall_1());
		}
		this_BooleanVariableRef_1=ruleBooleanVariableRef
		{
			$current = $this_BooleanVariableRef_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermBoolAccess().getIntComparisonParserRuleCall_2());
		}
		this_IntComparison_2=ruleIntComparison
		{
			$current = $this_IntComparison_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTermBoolAccess().getNotAction_3_0(),
						$current);
				}
			)
			otherlv_4='!'
			{
				newLeafNode(otherlv_4, grammarAccess.getTermBoolAccess().getExclamationMarkKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTermBoolAccess().getExpressionTermBoolParserRuleCall_3_2_0());
					}
					lv_expression_5_0=ruleTermBool
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermBoolRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"fr.inria.diverse.MiniFSM.TermBool");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleBooleanVariableRef
entryRuleBooleanVariableRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanVariableRefRule()); }
	iv_ruleBooleanVariableRef=ruleBooleanVariableRef
	{ $current=$iv_ruleBooleanVariableRef.current; }
	EOF;

// Rule BooleanVariableRef
ruleBooleanVariableRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanVariableRefAccess().getBooleanVariableRefAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanVariableRefAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanVariableRefRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.inria.diverse.MiniFSM.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBoolean
entryRuleBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleBoolean=ruleBoolean
	{ $current=$iv_ruleBoolean.current; }
	EOF;

// Rule Boolean
ruleBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0='value'
				{
					newLeafNode(lv_value_0_0, grammarAccess.getBooleanAccess().getValueValueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanRule());
					}
					setWithLastConsumed($current, "value", true, "value");
				}
			)
		)
		otherlv_1='Boolean'
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanAccess().getBooleanKeyword_1());
		}
	)
;

// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); }
	iv_ruleEBoolean=ruleEBoolean
	{ $current=$iv_ruleEBoolean.current.getText(); }
	EOF;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleIntComparison
entryRuleIntComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntComparisonRule()); }
	iv_ruleIntComparison=ruleIntComparison
	{ $current=$iv_ruleIntComparison.current; }
	EOF;

// Rule IntComparison
ruleIntComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIntComparisonAccess().getEqualParserRuleCall_0());
		}
		this_Equal_0=ruleEqual
		{
			$current = $this_Equal_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIntComparisonAccess().getGreaterParserRuleCall_1());
		}
		this_Greater_1=ruleGreater
		{
			$current = $this_Greater_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIntComparisonAccess().getGreaterOrEqualParserRuleCall_2());
		}
		this_GreaterOrEqual_2=ruleGreaterOrEqual
		{
			$current = $this_GreaterOrEqual_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIntComparisonAccess().getLessParserRuleCall_3());
		}
		this_Less_3=ruleLess
		{
			$current = $this_Less_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIntComparisonAccess().getLessOrEqualParserRuleCall_4());
		}
		this_LessOrEqual_4=ruleLessOrEqual
		{
			$current = $this_LessOrEqual_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEqual
entryRuleEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualRule()); }
	iv_ruleEqual=ruleEqual
	{ $current=$iv_ruleEqual.current; }
	EOF;

// Rule Equal
ruleEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='equal'
		{
			newLeafNode(otherlv_0, grammarAccess.getEqualAccess().getEqualKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getEqualAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualAccess().getLeftIntExpressionParserRuleCall_2_0());
				}
				lv_left_2_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_2_0,
						"fr.inria.diverse.MiniFSM.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getEqualAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualAccess().getRightIntExpressionParserRuleCall_4_0());
				}
				lv_right_4_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_4_0,
						"fr.inria.diverse.MiniFSM.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getEqualAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleGreater
entryRuleGreater returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGreaterRule()); }
	iv_ruleGreater=ruleGreater
	{ $current=$iv_ruleGreater.current; }
	EOF;

// Rule Greater
ruleGreater returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='greater'
		{
			newLeafNode(otherlv_0, grammarAccess.getGreaterAccess().getGreaterKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getGreaterAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterAccess().getLeftIntExpressionParserRuleCall_2_0());
				}
				lv_left_2_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterRule());
					}
					set(
						$current,
						"left",
						lv_left_2_0,
						"fr.inria.diverse.MiniFSM.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getGreaterAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterAccess().getRightIntExpressionParserRuleCall_4_0());
				}
				lv_right_4_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterRule());
					}
					set(
						$current,
						"right",
						lv_right_4_0,
						"fr.inria.diverse.MiniFSM.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getGreaterAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleGreaterOrEqual
entryRuleGreaterOrEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGreaterOrEqualRule()); }
	iv_ruleGreaterOrEqual=ruleGreaterOrEqual
	{ $current=$iv_ruleGreaterOrEqual.current; }
	EOF;

// Rule GreaterOrEqual
ruleGreaterOrEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='greaterOrEqual'
		{
			newLeafNode(otherlv_0, grammarAccess.getGreaterOrEqualAccess().getGreaterOrEqualKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getGreaterOrEqualAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterOrEqualAccess().getLeftIntExpressionParserRuleCall_2_0());
				}
				lv_left_2_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterOrEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_2_0,
						"fr.inria.diverse.MiniFSM.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getGreaterOrEqualAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterOrEqualAccess().getRightIntExpressionParserRuleCall_4_0());
				}
				lv_right_4_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterOrEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_4_0,
						"fr.inria.diverse.MiniFSM.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getGreaterOrEqualAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleLess
entryRuleLess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLessRule()); }
	iv_ruleLess=ruleLess
	{ $current=$iv_ruleLess.current; }
	EOF;

// Rule Less
ruleLess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='less'
		{
			newLeafNode(otherlv_0, grammarAccess.getLessAccess().getLessKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLessAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLessAccess().getLeftIntExpressionParserRuleCall_2_0());
				}
				lv_left_2_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLessRule());
					}
					set(
						$current,
						"left",
						lv_left_2_0,
						"fr.inria.diverse.MiniFSM.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getLessAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLessAccess().getRightIntExpressionParserRuleCall_4_0());
				}
				lv_right_4_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLessRule());
					}
					set(
						$current,
						"right",
						lv_right_4_0,
						"fr.inria.diverse.MiniFSM.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getLessAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleLessOrEqual
entryRuleLessOrEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLessOrEqualRule()); }
	iv_ruleLessOrEqual=ruleLessOrEqual
	{ $current=$iv_ruleLessOrEqual.current; }
	EOF;

// Rule LessOrEqual
ruleLessOrEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='lessOrEqual'
		{
			newLeafNode(otherlv_0, grammarAccess.getLessOrEqualAccess().getLessOrEqualKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLessOrEqualAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLessOrEqualAccess().getLeftIntExpressionParserRuleCall_2_0());
				}
				lv_left_2_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLessOrEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_2_0,
						"fr.inria.diverse.MiniFSM.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getLessOrEqualAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLessOrEqualAccess().getRightIntExpressionParserRuleCall_4_0());
				}
				lv_right_4_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLessOrEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_4_0,
						"fr.inria.diverse.MiniFSM.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getLessOrEqualAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleIntExpression
entryRuleIntExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntExpressionRule()); }
	iv_ruleIntExpression=ruleIntExpression
	{ $current=$iv_ruleIntExpression.current; }
	EOF;

// Rule IntExpression
ruleIntExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getIntExpressionAccess().getPlusMinusParserRuleCall());
	}
	this_PlusMinus_0=rulePlusMinus
	{
		$current = $this_PlusMinus_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulePlusMinus
entryRulePlusMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusMinusRule()); }
	iv_rulePlusMinus=rulePlusMinus
	{ $current=$iv_rulePlusMinus.current; }
	EOF;

// Rule PlusMinus
rulePlusMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlusMinusAccess().getMultDivParserRuleCall_0());
		}
		this_MultDiv_0=ruleMultDiv
		{
			$current = $this_MultDiv_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getPlusMinusAccess().getPlusLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='+'
				{
					newLeafNode(otherlv_2, grammarAccess.getPlusMinusAccess().getPlusSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPlusMinusAccess().getRightMultDivParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleMultDiv
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPlusMinusRule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"fr.inria.diverse.MiniFSM.MultDiv");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getPlusMinusAccess().getMinusLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='-'
				{
					newLeafNode(otherlv_5, grammarAccess.getPlusMinusAccess().getHyphenMinusKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPlusMinusAccess().getRightMultDivParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleMultDiv
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPlusMinusRule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"fr.inria.diverse.MiniFSM.MultDiv");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleMultDiv
entryRuleMultDiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultDivRule()); }
	iv_ruleMultDiv=ruleMultDiv
	{ $current=$iv_ruleMultDiv.current; }
	EOF;

// Rule MultDiv
ruleMultDiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultDivAccess().getTermIntParserRuleCall_0());
		}
		this_TermInt_0=ruleTermInt
		{
			$current = $this_TermInt_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMultDivAccess().getMultiplyLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='*'
				{
					newLeafNode(otherlv_2, grammarAccess.getMultDivAccess().getAsteriskKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMultDivAccess().getRightTermIntParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleTermInt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultDivRule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"fr.inria.diverse.MiniFSM.TermInt");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMultDivAccess().getDivideLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='/'
				{
					newLeafNode(otherlv_5, grammarAccess.getMultDivAccess().getSolidusKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMultDivAccess().getRightTermIntParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleTermInt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultDivRule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"fr.inria.diverse.MiniFSM.TermInt");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleTermInt
entryRuleTermInt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermIntRule()); }
	iv_ruleTermInt=ruleTermInt
	{ $current=$iv_ruleTermInt.current; }
	EOF;

// Rule TermInt
ruleTermInt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTermIntAccess().getIntegerParserRuleCall_0());
		}
		this_Integer_0=ruleInteger
		{
			$current = $this_Integer_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermIntAccess().getIntVariableRefParserRuleCall_1());
		}
		this_IntVariableRef_1=ruleIntVariableRef
		{
			$current = $this_IntVariableRef_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getTermIntAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getTermIntAccess().getPlusMinusParserRuleCall_2_1());
			}
			this_PlusMinus_3=rulePlusMinus
			{
				$current = $this_PlusMinus_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getTermIntAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleInteger
entryRuleInteger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerRule()); }
	iv_ruleInteger=ruleInteger
	{ $current=$iv_ruleInteger.current; }
	EOF;

// Rule Integer
ruleInteger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getIntegerAccess().getValueEIntParserRuleCall_0());
			}
			lv_value_0_0=ruleEInt
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getIntegerRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"fr.inria.diverse.MiniFSM.EInt");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleIntVariableRef
entryRuleIntVariableRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntVariableRefRule()); }
	iv_ruleIntVariableRef=ruleIntVariableRef
	{ $current=$iv_ruleIntVariableRef.current; }
	EOF;

// Rule IntVariableRef
ruleIntVariableRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntVariableRefAccess().getIntVariableRefAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIntVariableRefAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntVariableRefRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.inria.diverse.MiniFSM.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleIntegerVar
entryRuleIntegerVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerVarRule()); }
	iv_ruleIntegerVar=ruleIntegerVar
	{ $current=$iv_ruleIntegerVar.current; }
	EOF;

// Rule IntegerVar
ruleIntegerVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntegerVarAccess().getIntegerVarAction_0(),
					$current);
			}
		)
		otherlv_1='Integer'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerVarAccess().getIntegerKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntegerVarAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntegerVarRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.inria.diverse.MiniFSM.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getIntegerVarAccess().getEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntegerVarAccess().getValueEIntParserRuleCall_3_1_0());
					}
					lv_value_4_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntegerVarRule());
						}
						set(
							$current,
							"value",
							lv_value_4_0,
							"fr.inria.diverse.MiniFSM.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleBooleanVar
entryRuleBooleanVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanVarRule()); }
	iv_ruleBooleanVar=ruleBooleanVar
	{ $current=$iv_ruleBooleanVar.current; }
	EOF;

// Rule BooleanVar
ruleBooleanVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanVarAccess().getBooleanVarAction_0(),
					$current);
			}
		)
		otherlv_1='Boolean'
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanVarAccess().getBooleanKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanVarAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanVarRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.inria.diverse.MiniFSM.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getBooleanVarAccess().getEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanVarAccess().getValueEBooleanParserRuleCall_3_1_0());
					}
					lv_value_4_0=ruleEBoolean
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanVarRule());
						}
						set(
							$current,
							"value",
							lv_value_4_0,
							"fr.inria.diverse.MiniFSM.EBoolean");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
