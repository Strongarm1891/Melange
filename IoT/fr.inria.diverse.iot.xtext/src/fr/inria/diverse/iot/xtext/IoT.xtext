// automatically generated by Xtext
grammar fr.inria.diverse.iot.xtext.IoT with org.eclipse.xtext.xbase.Xbase

import "http://iotlang/" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

System returns EPackage:
	'system' name = ValidID '{'
		eClassifiers += Device*
	'}'
;

Device returns EClass:
	'device' name = ValidID '{'
		eOperations += Service*
	'}'
;

Service returns EOperation:
	'service' name = ValidID '{'
		activity = Activity
	'}'
;

Activity returns Activity:
	{Activity}
	'activity'
	name=ValidID ('(' inputs+=Variable ( "," inputs+=Variable)* ')' )?
	'{'
		(locals+=Variable ( "," locals+=Variable)* )?
		('nodes' '{' nodes+=ActivityNode ( "," nodes+=ActivityNode)* '}' )?
		('edges' '{' edges+=ActivityEdge ( "," edges+=ActivityEdge)* '}' )?

	'}';

ActivityNode returns ActivityNode:
	OpaqueAction | InitialNode | ActivityFinalNode | ForkNode | JoinNode | MergeNode | DecisionNode;

ActivityEdge returns ActivityEdge:
	ControlFlow;

Variable returns Variable:
	IntegerVariable | BooleanVariable;

Value returns Value:
	BooleanValue | IntegerValue;

OpaqueAction returns OpaqueAction:
	{OpaqueAction}
	'luaAction'
	name=ValidID
		('in' '(' incoming+=[ActivityEdge] ( "," incoming+=[ActivityEdge])* ')' )?
		('out' '(' outgoing+=[ActivityEdge] ( "," outgoing+=[ActivityEdge])* ')' )?
		('{' (lua = Block) '}')?
		;

InitialNode returns InitialNode:
	{InitialNode}
	'initial'
	name=ValidID
		('out' '(' outgoing+=[ActivityEdge] ( "," outgoing+=[ActivityEdge])* ')' )
	;

ActivityFinalNode returns ActivityFinalNode:
	{ActivityFinalNode}
	'final'
	name=ValidID
		('in' '(' incoming+=[ActivityEdge] ( "," incoming+=[ActivityEdge])* ')' )
	;

ForkNode returns ForkNode:
	{ForkNode}
	'fork'
	name=ValidID
		('in' '(' incoming+=[ActivityEdge] ')' )
		('out' '(' outgoing+=[ActivityEdge] ( "," outgoing+=[ActivityEdge])* ')' )?
	;

JoinNode returns JoinNode:
	{JoinNode}
	'join'
	name=ValidID
		('in' '(' incoming+=[ActivityEdge] ( "," incoming+=[ActivityEdge])* ')' )?
		('out' '(' outgoing+=[ActivityEdge] ')' )
	;

MergeNode returns MergeNode:
	{MergeNode}
	'merge'
	name=ValidID
		('in' '(' incoming+=[ActivityEdge] ( "," incoming+=[ActivityEdge])* ')' )?
		('out' '(' outgoing+=[ActivityEdge] ')' )
	;

DecisionNode returns DecisionNode:
	{DecisionNode}
	'decision'
	name=ValidID
		('in' '(' incoming+=[ActivityEdge] ')' )
		('out' '(' outgoing+=[ActivityEdge] ( "," outgoing+=[ActivityEdge])* ')' )?
	;

IntegerVariable returns IntegerVariable:
	{IntegerVariable}
	'int'
	name=ValidID
		('=' initialValue=Value)?;
	
BooleanVariable returns BooleanVariable:
	{BooleanVariable}
	'bool'
	name=ValidID
		('=' initialValue=Value)?;

BooleanValue returns BooleanValue:
	value=EBoolean;

IntegerValue returns IntegerValue:
	value=INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

ControlFlow returns ControlFlow:
	'flow'
	name=ValidID
		'from' source=[ActivityNode]
		'to' target=[ActivityNode]
		('[' guard=[BooleanVariable] ']')?;

Chunk:
    Block;
 
Block:
    {Block}
    (statements+=Statement (';')? )*
    ( returnValue=LastStatement (';')? )?;
 
// ****************************************************
// LAST STATEMENT
// ****************************************************
LastStatement: 
    LastStatement_Return | LastStatement_Break;
 
// The return statement is used to return values from a function or a chunk
LastStatement_Return: 
    'return' {LastStatement_ReturnWithValue} (returnValues+=Expression (',' returnValues+=Expression)*)?;
 
// The break statement is used to terminate the execution of a while, repeat, or for loop, skipping to the next statement after the loop
LastStatement_Break: 
    'break' {LastStatement_Break};
 
// ****************************************************
// STATEMENT
// ****************************************************
Statement:
    Statement_Block |
    Statement_While |
    Statement_Repeat |
    Statement_If_Then_Else |
    Statement_For_Numeric |
    Statement_For_Generic |
    Statement_GlobalFunction_Declaration |
    Statement_LocalFunction_Declaration |
    Statement_Local_Variable_Declaration |
    Statement_FunctioncallOrAssignment;
 
// A block can be explicitly delimited to produce a single statement. "do ... end"
Statement_Block: 
    'do' block=Block 'end';
 
// Control structure. "while ... do ... end"
Statement_While: 
    'while' expression=Expression 'do' block=Block 'end';
 
// Control structure. "repeat ... until ..."
Statement_Repeat: 
    'repeat' block=Block 'until' expression=Expression;
 
// Control structure. "if ... then ... elseif ... elseif ... else ... end"
Statement_If_Then_Else: 
    'if' ifExpression=Expression 'then' ifBlock=Block (elseIf+=Statement_If_Then_Else_ElseIfPart)* ('else' elseBlock=Block)? 'end';
Statement_If_Then_Else_ElseIfPart:
    'elseif' elseifExpression=Expression 'then' elseifBlock=Block;
 
// The numeric for loop repeats a block of code while a control variable runs through an arithmetic progression "for ...=..., ... [,...] do ... end"
Statement_For_Numeric: 
    'for' iteratorName=ValidID '=' startExpr=Expression "," untilExpr=Expression ("," stepExpr=Expression)? 'do' block=Block 'end';
 
// The generic for statement works over functions, called iterators. On each iteration, the iterator function is called to produce a new value, stopping when this new value is nil "for ... in ... do ... end"
Statement_For_Generic: 
    'for' names+=ValidID (',' names+=ValidID)* 'in' expressions+=Expression (',' expressions+=Expression)* 'do' block=Block 'end';
 
Statement_GlobalFunction_Declaration:
    'function' prefix+=ValidID ('.' prefix+=ValidID)* (':' functionName=ValidID)? function=Function 'end';
 
Statement_LocalFunction_Declaration:
    'local' 'function' functionName=ValidID function=Function 'end';
 
// Local variables can be declared anywhere inside a block. The declaration can include an initial assignment "local ... [= ...]"
Statement_Local_Variable_Declaration: 
    'local' variableNames+=ValidID (',' variableNames+=ValidID)* ('=' initialValue+=Expression (',' initialValue+=Expression)*)?;
 
Statement_FunctioncallOrAssignment:
    Expression_AccessMemberOrArrayElement (
        // Assignment
        ({Statement_Assignment.variable+=current} (=> ',' variable+=Expression_AccessMemberOrArrayElement)* '=' values+=Expression (',' values+=Expression)*) |
 
        // Call of a member function
        (':' {Statement_CallMemberFunction.object=current} memberFunctionName=ValidID arguments=Functioncall_Arguments ) |
 
        // Call of a function pointer
        ({Statement_CallFunction.object=current} arguments=Functioncall_Arguments)
    );
 
// ****************************************************
// EXPRESSIONS
// ****************************************************
// Delegate to the priority chain of operators by calling the rule for the lowest priority operator
Expression: 
    Expression_Or;
 
// Or: left associative, priority 0
Expression_Or returns Expression: 
    Expression_And ('or' {Expression_Or.left=current} right=Expression_And)*;
 
// And: left associative, priority 1
Expression_And returns Expression: 
    Expression_Compare ('and' {Expression_And.left=current} right=Expression_Compare)*;
 
// Comparisons: left associative, priority 2
Expression_Compare returns Expression: 
    Expression_Concatenation (
        ('>'  {Expression_Larger.left=current} right=Expression_Concatenation) |
        ('>=' {Expression_Larger_Equal.left=current} right=Expression_Concatenation) |
        ('<'  {Expression_Smaller.left=current} right=Expression_Concatenation) |
        ('<=' {Expression_Smaller_Equal.left=current} right=Expression_Concatenation) |
        ('==' {Expression_Equal.left=current} right=Expression_Concatenation) |
        ('~=' {Expression_Not_Equal.left=current} right=Expression_Concatenation)
    )*;
 
// Concatenation: right associative, priority 3
Expression_Concatenation returns Expression: 
    Expression_PlusMinus ('..' {Expression_Concatenation.left=current} right=Expression_Concatenation)?;
 
// addition/subtraction: left associative, priority 4
Expression_PlusMinus returns Expression: 
    Expression_MultiplicationDivisionModulo (
        ('+'  {Expression_Plus.left=current} right=Expression_MultiplicationDivisionModulo) |
        ('-'  {Expression_Minus.left=current} right=Expression_MultiplicationDivisionModulo)
    )*;
 
// multiplication/division, left associative, priority 5
Expression_MultiplicationDivisionModulo returns Expression:
    Expression_Unary (
        ('*'  {Expression_Multiplication.left=current} right=Expression_Unary) |
        ('/'  {Expression_Division.left=current} right=Expression_Unary) |
        ('%'  {Expression_Modulo.left=current} right=Expression_Unary)
    )*;
 
// Unary operators: right associative, priority 6
Expression_Unary returns Expression: 
    Expression_Exponentiation |
    ('not' {Expression_Negate} exp=Expression_Unary) |
    ('#'   {Expression_Length} exp=Expression_Unary) |
    ('-'   {Expression_Invert} exp=Expression_Unary);
 
// exponentiation: right associative, priority 7
Expression_Exponentiation returns Expression: 
    Expression_Terminal
    ( '^' {Expression_Exponentiation.left=current} right=Expression_Exponentiation )?;
 
Expression_Terminal returns Expression:
    Expression_Nil |
    Expression_True |
    Expression_False |
    Expression_Number |
    Expression_VarArgs |
    Expression_String |
    Expression_Function |
    Expression_TableConstructor |
    Expression_Functioncall;
 
Expression_Nil:
    'nil' {Expression_Nil};
Expression_True:
    'true' {Expression_True};
Expression_False:
    'false' {Expression_False};
Expression_Number:
    value=DOUBLE;
Expression_VarArgs:
    '...' {Expression_VarArgs};
Expression_String:
    value=STRING;
Expression_Function:
    'function' function=Function 'end';
Expression_TableConstructor:
    '{' {Expression_TableConstructor} (fields+=Field ((','|';') fields+=Field)* (','|';')? )? '}';
 
// Function calls, left associative, single call only, priority 9
Expression_Functioncall returns Expression: 
    Expression_AccessMemberOrArrayElement (
        // Member-Funktionsaufruf
        (=> ':' {Expression_CallMemberFunction.object=current} memberFunctionName=ValidID arguments=Functioncall_Arguments) |
 
        // Aufruf eines Funktionspointer:
        ({Expression_CallFunction.object=current} arguments=Functioncall_Arguments)
    )?;
 
// Access a member or array element, left associative, chaining possible, priority 10
Expression_AccessMemberOrArrayElement returns Expression: 
    Expression_VariableName (
        // An expression accessing an element in a variable array
        ('[' {Expression_AccessArray.array=current} index=Expression ']') |
 
        // Access a member variable using multiple parts separated by "."
        ('.' {Expression_AccessMember.object=current} memberName=ValidID)
    )*;
 
// access a variable, terminal expression, priority 11
// Delegate to top of expression rule chain for bracketed expressions
Expression_VariableName returns Expression: 
    ('(' Expression ')') |
    ({Expression_VariableName} variable=ValidID);
 
 
// ****************************************************
// FUNCTIONS
// ****************************************************
Function:
    '(' (parameters+=ValidID (',' parameters+=ValidID)* ','?)? (varArgs?='...')? ')' body=Block;
 
// Some syntactic sugar: strings and field can be passed as parameters without bracket
Functioncall_Arguments: 
    {Functioncall_Arguments}
    (
        ('(' (arguments+=Expression (',' arguments+=Expression)*)? ')' ) |
        (arguments+=Expression_TableConstructor) |
        (arguments+=Expression_String)
    );
 
// ****************************************************
// TABLES/FIELDS
// ****************************************************
Field:
    Field_AddEntryToTable_Brackets |
    Field_AddEntryToTable |
    Field_AppendEntryToTable;
 
// Each field of the form "[exp1] = exp2" adds to the new table an entry with key exp1 and value exp2
Field_AddEntryToTable_Brackets: 
    '[' indexExpression=Expression ']' '=' value=Expression;
 
// A field of the form "name = exp" is equivalent to ["name"] = exp
Field_AddEntryToTable: 
    key=ValidID '=' value=Expression;
 
// fields of the form "exp" are equivalent to [i] = exp
Field_AppendEntryToTable: 
    value=Expression;

terminal DOUBLE returns ecore::EDouble:
	'0'..'9' ('0'..'9'|'_')*; 
 