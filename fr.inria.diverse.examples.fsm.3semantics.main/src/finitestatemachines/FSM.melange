package finitestatemachines

language FiniteStateMachineUML{
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.metamodel.composite/model/fsm.ecore"
	with finitestatemachines.composite.uml.StateMachineAspect
	with finitestatemachines.composite.uml.StateAspect
	with finitestatemachines.composite.uml.CompositeStateAspect
	with finitestatemachines.composite.uml.TransitionAspect
	exactType FiniteStateMachineUMLMT
}

language FiniteStateMachineRhapsody{
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.metamodel.composite/model/fsm.ecore"
	with finitestatemachines.composite.rhapsody.StateMachineAspect
	with finitestatemachines.composite.rhapsody.StateAspect
	with finitestatemachines.composite.rhapsody.CompositeStateAspect
	with finitestatemachines.composite.rhapsody.TransitionAspect
	exactType FiniteStateMachineRhapsodyMT
}

language FiniteStateMachineClassic{
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.metamodel.composite/model/fsm.ecore"
	with finitestatemachines.composite.classic.StateMachineAspect
	with finitestatemachines.composite.classic.StateAspect
	with finitestatemachines.composite.classic.CompositeStateAspect
	with finitestatemachines.composite.classic.TransitionAspect
	exactType FiniteStateMachineClassicMT
}

transformation execute(FiniteStateMachineUMLMT stateMachine, String input, String outputFile){
	val root = stateMachine.contents.head as finitestatemachines.finitestatemachineumlmt.StateMachine
	root.eval(new FSM.interfaces.Context(input), outputFile)
}

// Execution of the state machines.
@Main
transformation main(){
	val simpleProgram = FiniteStateMachineUML.load("input/exampleComposite.xmi")
	execute.call(simpleProgram, "{e}", "output/UML-output " + 
		System.currentTimeMillis + ".pdf")

	val simpleProgram2 = FiniteStateMachineRhapsody.load("input/exampleComposite.xmi")
	execute.call(simpleProgram2, "{e}", "output/Rhapsody-output " + 
		System.currentTimeMillis + ".pdf")

	val simpleProgram3 = FiniteStateMachineClassic.load("input/exampleComposite.xmi")
	execute.call(simpleProgram3, "{e}", "output/Classic-output " + 
		System.currentTimeMillis + ".pdf")
}
